import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job

## @params: [JOB_NAME]
args = getResolvedOptions(sys.argv, ['JOB_NAME'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)
## @type: DataSource
## @args: [database = "vwdatabase2", table_name = "dynamodb_cata_vw", transformation_ctx = "DataSource0"]
## @return: DataSource0
## @inputs: []
DataSource0 = glueContext.create_dynamic_frame.from_catalog(database = "vwdatabase2", table_name = "dynamodb_cata_vw", transformation_ctx = "DataSource0")
## @type: ApplyMapping
## @args: [mappings = [("template", "string", "template", "string"), ("partid", "string", "partid", "string"), ("dislocationtype", "string", "dislocationtype", "string"), ("__typename", "string", "__typename", "string"), ("starttimedate", "string", "starttimedate", "string"), ("description", "string", "description", "string"), ("dislocationspecification", "string", "dislocationspecification", "string"), ("duration", "string", "duration", "string"), ("createdat", "string", "createdat", "string"), ("measures", "string", "measures", "string"), ("endtimedate", "string", "endtimedate", "string"), ("deleted", "string", "deleted", "string"), ("unitid", "string", "unitid", "string"), ("id", "string", "id", "string"), ("dislocation", "string", "dislocation", "string"), ("updatedat", "string", "updatedat", "string")], transformation_ctx = "Transform0"]
## @return: Transform0
## @inputs: [frame = DataSource0]
Transform0 = ApplyMapping.apply(frame = DataSource0, mappings = [("template", "string", "template", "string"), ("partid", "string", "partid", "string"), ("dislocationtype", "string", "dislocationtype", "string"), ("__typename", "string", "__typename", "string"), ("starttimedate", "string", "starttimedate", "string"), ("description", "string", "description", "string"), ("dislocationspecification", "string", "dislocationspecification", "string"), ("duration", "string", "duration", "string"), ("createdat", "string", "createdat", "string"), ("measures", "string", "measures", "string"), ("endtimedate", "string", "endtimedate", "string"), ("deleted", "string", "deleted", "string"), ("unitid", "string", "unitid", "string"), ("id", "string", "id", "string"), ("dislocation", "string", "dislocation", "string"), ("updatedat", "string", "updatedat", "string")], transformation_ctx = "Transform0")
## @type: DataSink
## @args: [connection_type = "s3", catalog_database_name = "vwdatabase2", format = "csv", connection_options = {"path": "s3://s3-quicksight-mockdata/", "partitionKeys": [], "enableUpdateCatalog":true, "updateBehavior":"UPDATE_IN_DATABASE"}, catalog_table_name = "dynamodb_cata_vw", transformation_ctx = "DataSink0"]
## @return: DataSink0
## @inputs: [frame = Transform0]
DataSink0 = glueContext.getSink(path = "s3://s3-quicksight-mockdata/", connection_type = "s3", updateBehavior = "UPDATE_IN_DATABASE", partitionKeys = [], enableUpdateCatalog = True, transformation_ctx = "DataSink0")
DataSink0.setCatalogInfo(catalogDatabase = "vwdatabase2",catalogTableName = "dynamodb_cata_vw")
DataSink0.setFormat("csv")
DataSink0.writeFrame(Transform0)

job.commit()